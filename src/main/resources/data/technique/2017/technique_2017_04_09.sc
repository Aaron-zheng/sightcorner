
软件开发模型
<pre>
瀑布模型：要求需求明确。软件计划-需求分析-软件设计-程序编码-软件测试-运行维护
演化模型：演化原型为最终产品
增量模型：核心模块-其他模块逐步增加
螺旋模型：引入了风险分析。
快速原型模型：适合需求不明确。构造一个简易系统，与客户沟通。经过多轮沟通后，就可以确定需求。原型是会抛弃。
喷泉模型：特点是面向对象
V模型：强调测试贯穿始终，需求分析-验收测试，概要设计-系统测试，详细设计-集成测试，编码-单元测试
构件组装模型：基于控件的开发模型，需求分析定义-软件架构设计-构件库建立-应用软件构建-测试和发布

统一过程方法：核心，用例驱动，以架构为中心，迭代并增量。初始（确定项目范围边界，识别系统关键用例，评估风险）-细化（建立软件架构基础）-构建（开发剩余的构件，构件组装与测试）-交付（测试，发布）
敏捷开发方法：自适应开发，水晶方法，特征驱动开发，SCRUM，极限编程
</pre>


逆向工程
<pre>
现有系统-再工程（逆向工程，考虑新需求，正向工程）-新系统
设计模型（实现）-程序和数据结构信息（结构）-对象模型，数据和控制流模型（功能）-UML状态图和部署图（领域级）
</pre>


净室软件工程
<pre>
使用盒结构规约进行分析和设计建模，并且强调将正确性验证，而不是测试作为发现和消除错误的主要机制。
使用统计测试获取认证被交付的软件的可靠性所必须的出错率信息。
</pre>


软件测试
<pre>
动态测试：黑盒测试法（等价类划分，边界值分析，错误推测，因果图），白盒测试法，灰盒测试法
静态测试：桌前检查，代码走查，代码审查

冒烟测试：单元测试，集成测试（一次性组装，增量式组装），确认测试（内部确认测试，Alpha 测试，Beta 测试，验收测试），系统测试（恢复测试，安全性测试，压力测试，安全测试）

面向对象测试：

测试管理：团队管理，计划管理，错误跟踪管理，测试件管理

软件调试
</pre>


软件运行与维护
<pre>
直接转换，并行转换，分段转换

遗留系统的演化策略：通过业务价值和技术水平两个维度来划分
淘汰：企业业务发生变化，遗留系统基本不适应企业运作需求
继承：开发新系统，需要完全兼容遗留系统的功能模型和数据模型
改造：改造功能的增强，和数据模型的改造。对遗留系统本身不做改变
集成：针对信息孤岛做集成

数据转换与迁移：抽取-转换-装载

可维护性：易分析，易改变，稳定，易测试

维护类型：正确性维护（25，改正系统开发阶段已发生但系统测试阶段未发现的错误），适应性维护（20，适应信息技术变化和管理需求变化而进行的修改），完善性维护（50，扩充功能和改善性能而进行的修改），预防性维护（5，为了改进应用软件的可靠性和可维护性）
</pre>


软件开发环境
<pre>
环境机制
工具集
</pre>


软件过程改进
<pre>
CMMI，软件成熟度模型集成
阶段式：已管理级，已定义级，定量管理级，优化级
连续式：过程管理，项目管理，工程，支持
</pre>