
软件架构的概念
<pre>
需求分析-架构（鸿沟）-软件设计
架构设计就是需求分配，即将满足需求的职责分配到组件上。
</pre>


架构风格
<pre>
数据流风格：批处理序列，管道过滤器
调用／返回风格：主程序／子程序，面向对象，层次结构
独立构件风格：进程通信，事件驱动系统
虚拟机风格：解释器，基于规则的系统
仓库风格：数据库系统，超文本系统，黑板系统

基于服务的架构 (SOA)
</pre>


质量属性
<pre>
性能：代表参数，响应时间，吞吐量。设计策略，优先级队列，资源调度。
可靠性：代表参数MTTF，MTBF。设计策略，冗余，心跳线。
可用性：代表参数，故障间隔时间。设计策略，冗余，心跳线。
安全性：设计策略，追踪审计，信息隐藏。
可修改性
功能性
可变性
互操作性
</pre>

软件架构评估
<pre>
风险点：存在问题的架构决策所带来的隐患
敏感点：为实现某特定的质量属性，一个或多个构件所具有的特点
权衡点：影响多个属性的特性，是多个质量属性的敏感点
</pre>


产品线
<pre>
软件产品线是一个产品集合，这些产品共享一个公共，科管理的特征集。
</pre>

